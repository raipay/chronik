syntax = "proto3";

package chronik;

message ValidateUtxoRequest {
    repeated OutPoint outpoints = 1;
}

message ValidateUtxoResponse {
    repeated UtxoState utxo_states = 1;
}

message BroadcastTxRequest {
    bytes raw_tx = 1;
    bool skip_slp_check = 2;
}

message BroadcastTxResponse {
    bytes txid = 1;
}

message BroadcastTxsRequest {
    repeated bytes raw_txs = 1;
    bool skip_slp_check = 2;
}

message BroadcastTxsResponse {
    repeated bytes txids = 1;
}

message BlockchainInfo {
    bytes tip_hash = 1;
    int32 tip_height = 2;
}

message Tx {
    bytes txid = 1;
    int32 version = 2;
    repeated TxInput inputs = 3;
    repeated TxOutput outputs = 4;
    uint32 lock_time = 5;
    SlpTxData slp_tx_data = 6;
    string slp_error_msg = 7;
    BlockMetadata block = 8;
    int64 time_first_seen = 9;
    uint32 size = 11;
    bool is_coinbase = 12;
    Network network = 10;
}

message Utxo {
    OutPoint outpoint = 1;
    int32 block_height = 2;
    bool is_coinbase = 3;
    int64 value = 5;
    SlpMeta slp_meta = 6;
    SlpToken slp_token = 7;
    Network network = 9;
}

message Token {
    SlpTxData slp_tx_data = 1;
    TokenStats token_stats = 2;
}

message BlockInfo {
    bytes hash = 1;
    bytes prev_hash = 2;
    int32 height = 3;
    uint32 n_bits = 4;
    int64 timestamp = 5;
    // Block size of this block in bytes (including headers etc.)
    uint64 block_size = 6;
    // Number of txs in this block
    uint64 num_txs = 7;
    // Total number of tx inputs in block (including coinbase)
    uint64 num_inputs = 8;
    // Total number of tx output in block (including coinbase)
    uint64 num_outputs = 9;
    // Total number of satoshis spent by tx inputs
    int64 sum_input_sats = 10;
    // Block reward for this block
    int64 sum_coinbase_output_sats = 11;
    // Total number of satoshis in non-coinbase tx outputs
    int64 sum_normal_output_sats = 12;
    // Total number of satoshis burned using OP_RETURN
    int64 sum_burned_sats = 13;
}

message BlockDetails {
    int32 version = 1;
    bytes merkle_root = 2;
    uint64 nonce = 3;
    int64 median_timestamp = 4;
}

message Block {
    BlockInfo block_info = 1;
    BlockDetails block_details = 3;
    bytes raw_header = 4;
    repeated Tx txs = 2;
}

message ScriptUtxos {
    bytes output_script = 1;
    repeated Utxo utxos = 2;
}

message TxHistoryPage {
    repeated Tx txs = 1;
    uint32 num_pages = 2;
}

message Utxos {
    repeated ScriptUtxos script_utxos = 1;
}

message Blocks {
    repeated BlockInfo blocks = 1;
}

message SlpTxData {
    SlpMeta slp_meta = 1;
    SlpGenesisInfo genesis_info = 2;
}

message SlpMeta {
    SlpTokenType token_type = 1;
    SlpTxType tx_type = 2;
    bytes token_id = 3;
    bytes group_token_id = 4;
}

message TokenStats {
    // This doesn't fit into uint64, so we use a string with the decimal
    // representation. If available, use i128 to parse, otherwise some
    // BigNumber library.
    string total_minted = 1;
    string total_burned = 2;
}

message TxInput {
    OutPoint prev_out = 1;
    bytes input_script = 2;
    bytes output_script = 3;
    int64 value = 4;
    uint32 sequence_no = 5;
    SlpBurn slp_burn = 6;
    SlpToken slp_token = 7;
}

message TxOutput {
    int64 value = 1;
    bytes output_script = 2;
    SlpToken slp_token = 3;
    OutPoint spent_by = 4;
}

message BlockMetadata {
    int32 height = 1;
    bytes hash = 2;
    int64 timestamp = 3;
}

message OutPoint {
    bytes txid = 1;
    uint32 out_idx = 2;
}

message SlpToken {
    uint64 amount = 1;
    bool is_mint_baton = 2;
}

message SlpBurn {
    SlpToken token = 1;
    bytes token_id = 2;
}

message SlpGenesisInfo {
    bytes token_ticker = 1;
    bytes token_name = 2;
    bytes token_document_url = 3;
    bytes token_document_hash = 4;
    uint32 decimals = 5;
}

enum SlpTokenType {
    FUNGIBLE = 0;
    NFT1_GROUP = 1;
    NFT1_CHILD = 2;
    UNKNOWN_TOKEN_TYPE = 3;
}

enum SlpTxType {
    GENESIS = 0;
    SEND = 1;
    MINT = 2;
    UNKNOWN_TX_TYPE = 3;
}

enum Network {
    BCH = 0;
    XEC = 1;
    XPI = 2;
    XRG = 3;
}

message UtxoState {
    int32 height = 1;
    bool is_confirmed = 2;
    UtxoStateVariant state = 3;
}

enum UtxoStateVariant {
    UNSPENT = 0;
    SPENT = 1;
    NO_SUCH_TX = 2;
    NO_SUCH_OUTPUT = 3;
}

message Subscription {
    string script_type = 1;
    bytes payload = 2;
    bool is_subscribe = 3;
}

message SubscribeMsg {
    oneof msg_type {
        Error error = 1;
        MsgAddedToMempool AddedToMempool = 2;
        MsgRemovedFromMempool RemovedFromMempool = 3;
        MsgConfirmed Confirmed = 4;
        MsgReorg Reorg = 5;
        MsgBlockConnected BlockConnected = 6;
        MsgBlockDisconnected BlockDisconnected = 7;
    }
}

message MsgAddedToMempool {
    bytes txid = 1;
}

message MsgRemovedFromMempool {
    bytes txid = 1;
}

message MsgConfirmed {
    bytes txid = 1;
}

message MsgReorg {
    bytes txid = 1;
}

message MsgBlockConnected {
    bytes block_hash = 1;
}

message MsgBlockDisconnected {
    bytes block_hash = 1;
}

message Error {
    string error_code = 1;
    string msg = 2;
    bool is_user_error = 3;
}
